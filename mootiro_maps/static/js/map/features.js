// Generated by CoffeeScript 1.4.0

define(function(require) {
  'use strict';

  var Feature, defaultFeatureType, geometries, googleMaps, uid, _base, _ref, _ref1;
  googleMaps = require('googlemaps');
  geometries = require('./geometries');
  if ((_ref = window.komoo) == null) {
    window.komoo = {};
  }
  if ((_ref1 = (_base = window.komoo).event) == null) {
    _base.event = googleMaps.event;
  }
  uid = 0;
  defaultFeatureType = {
    minZoomPoint: 0,
    maxZoomPoint: 10,
    minZoomIcon: 10,
    maxZoomIcon: 100,
    minZoomGeometry: 0,
    maxZoomGeometry: 100
  };
  Feature = (function() {

    Feature.prototype.displayTooltip = true;

    Feature.prototype.displayInfoWindow = true;

    function Feature(options) {
      var geometry;
      this.options = options != null ? options : {};
      this.uid = uid++;
      geometry = this.options.geometry;
      this.setFeatureType(this.options.featureType);
      if (this.options.geojson) {
        if (this.options.geojson.properties) {
          this.setProperties(this.options.geojson.properties);
        }
        if (geometry == null) {
          geometry = geometries.makeGeometry(this.options.geojson, this);
        }
      }
      if (geometry != null) {
        this.setGeometry(geometry);
        this.createMarker();
      }
    }

    Feature.prototype.createMarker = function() {
      var marker, _ref2;
      if ((_ref2 = this.geometry.getGeometryType()) === 'Point' || _ref2 === 'MultiPoint') {
        return;
      }
      marker = new geometries.Point({
        visible: false,
        clickable: true
      });
      marker.setCoordinates(this.getCenter());
      return this.setMarker(marker);
    };

    Feature.prototype.initEvents = function(object) {
      var eventsNames, that;
      if (object == null) {
        object = this.geometry;
      }
      that = this;
      eventsNames = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick', 'drag', 'dragend', 'draggable_changed', 'dragstart', 'coordinates_changed'];
      return eventsNames.forEach(function(eventName) {
        return komoo.event.addListener(object, eventName, function(e, args) {
          return komoo.event.trigger(that, eventName, e, args);
        });
      });
    };

    Feature.prototype.getGeometry = function() {
      return this.geometry;
    };

    Feature.prototype.setGeometry = function(geometry) {
      this.geometry = geometry;
      this.geometry.feature = this;
      return this.initEvents();
    };

    Feature.prototype.getGeometryType = function() {
      return this.geometry.getGeometryType();
    };

    Feature.prototype.getFeatureType = function() {
      return this.featureType;
    };

    Feature.prototype.setFeatureType = function(featureType) {
      this.featureType = featureType != null ? featureType : defaultFeatureType;
    };

    Feature.prototype.getMarker = function() {
      return this.marker;
    };

    Feature.prototype.setMarker = function(marker) {
      this.marker = marker;
      this.marker.getOverlay().feature = this;
      this.initEvents(this.marker);
      this.marker.setVisible(this.markerShouldBeVisible());
      return this.marker;
    };

    Feature.prototype.handleGeometryEvents = function() {
      var _this = this;
      return komoo.event.addListener(this.geometry, 'coordinates_changed', function(args) {
        _this.updateIcon();
        return komoo.event.trigger(_this, 'coordinates_changed', args);
      });
    };

    Feature.prototype.getUrl = function() {
      var viewName;
      viewName = "view_" + (this.properties.type.toLowerCase());
      return dutils.urls.resolve(viewName, {
        id: this.properties.id
      }).replace('//', '/');
    };

    Feature.prototype.isHighlighted = function() {
      return this.highlighted;
    };

    Feature.prototype.highlight = function() {
      return this.setHighlight(true);
    };

    Feature.prototype.setHighlight = function(highlighted, silent) {
      if (silent == null) {
        silent = false;
      }
      if (this.highlighted === highlighted) {
        return;
      }
      this.highlighted = highlighted;
      this.updateIcon();
      if (!silent) {
        return komoo.event.trigger(this, 'highlight_changed', this.highlighted);
      }
    };

    Feature.prototype.isNew = function() {
      return !this.getProperty('id');
    };

    Feature.prototype.getIconUrl = function(zoom) {
      var categoryOrType, highlighted, nearOrFar, url;
      if (this.getProperty('image')) {
        return this.getProperty('image');
      }
      if (zoom == null) {
        zoom = this.map ? this.map.getZoom() : 10;
      }
      nearOrFar = zoom >= this.featureType.minZoomIcon ? "near" : "far";
      highlighted = this.isHighlighted() ? "highlighted/" : "";
      categoryOrType = this.properties.type.toLowerCase();
      url = ("/static/img/" + nearOrFar + "/" + highlighted + categoryOrType + ".png").replace(' ', '-');
      return url;
    };

    Feature.prototype.createIcon = function(zoom) {
      return this.geometry.createIcon(zoom, this.isHighlighted());
    };

    Feature.prototype.updateIcon = function(zoom) {
      return this.setIcon(this.createIcon(zoom));
    };

    Feature.prototype.getCategoriesIcons = function() {
      var categorie, _i, _len, _ref2, _results;
      _ref2 = this.getCategories();
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        categorie = _ref2[_i];
        _results.push("/static/img/need_categories/" + (category.name.toLowerCase()) + ".png");
      }
      return _results;
    };

    Feature.prototype.getProperties = function() {
      return this.properties;
    };

    Feature.prototype.setProperties = function(properties) {
      this.properties = properties;
    };

    Feature.prototype.getProperty = function(name) {
      return this.properties[name];
    };

    Feature.prototype.setProperty = function(name, value) {
      return this.properties[name] = value;
    };

    Feature.prototype.getType = function() {
      return this.getProperty('type');
    };

    Feature.prototype.getCategories = function() {
      var _ref2;
      return (_ref2 = this.getProperty('categories')) != null ? _ref2 : [];
    };

    Feature.prototype.getGeometryGeoJson = function() {
      return this.geometry.getGeoJson();
    };

    Feature.prototype.getGeometryCollectionGeoJson = function() {
      return {
        type: "GeometryCollection",
        geometries: [this.getGeometryGeoJson()]
      };
    };

    Feature.prototype.getGeoJsonGeometry = function() {
      return this.getGeometryGeoJson();
    };

    Feature.prototype.getGeoJson = function() {
      return {
        type: 'Feature',
        geometry: this.getGeometryGeoJson(),
        properties: this.getProperties()
      };
    };

    Feature.prototype.getGeoJsonFeature = function() {
      return this.getGeoJson();
    };

    Feature.prototype.setEditable = function(editable) {
      this.editable = editable;
      return this.geometry.setEditable(this.editable);
    };

    Feature.prototype.showGeometry = function() {
      return this.geometry.setMap(this.map);
    };

    Feature.prototype.hideGeometry = function() {
      return this.geometry.setMap(null);
    };

    Feature.prototype.showMarker = function() {
      var _ref2;
      if ((_ref2 = this.marker) != null) {
        _ref2.setMap(this.map);
      }
      return this.marker.setVisible(this.markerShouldBeVisible());
    };

    Feature.prototype.hideMarker = function() {
      return this.marker.setVisible(false);
    };

    Feature.prototype.getMap = function() {
      return this.map;
    };

    Feature.prototype.setMap = function(map, force) {
      var _ref2;
      if (force == null) {
        force = {
          geometry: false,
          point: false,
          icon: false
        };
      }
      if (map === this.geometry.getMap()) {
        return;
      }
      this.oldMap = this.map;
      if (map != null) {
        this.map = map;
      }
      if ((_ref2 = this.marker) != null) {
        _ref2.setMap(map);
      }
      this.geometry.setMap(map);
      this.updateIcon();
      if (this.oldMap === void 0) {
        return this.handleMapEvents();
      }
    };

    Feature.prototype.isOutOfBounds = function() {
      return this.outOfBounds;
    };

    Feature.prototype.setOutOfBounds = function(outOfBounds) {
      this.outOfBounds = outOfBounds;
      return this.setMap(this.outOfBounds ? null : this.oldMap);
    };

    Feature.prototype.handleMapEvents = function() {
      var _this = this;
      return this.map.subscribe('feature_highlight_changed', function(flag, feature) {
        if (feature === _this) {
          return;
        }
        if (_this.isHighlighted()) {
          return _this.setHighlight(false, true);
        }
      });
    };

    Feature.prototype.getBounds = function() {
      return this.geometry.getBounds();
    };

    Feature.prototype.removeFromMap = function() {
      var _ref2;
      if ((_ref2 = this.marker) != null) {
        _ref2.setMap(null);
      }
      return this.setMap(null);
    };

    Feature.prototype.markerShouldBeVisible = function() {
      var _ref2, _ref3, _ref4, _ref5, _ref6;
      return ((_ref2 = this.map) != null ? _ref2.type : void 0) === 'preview' || (this.featureType.minZoomPoint <= (_ref3 = (_ref4 = this.map) != null ? _ref4.getZoom() : void 0) && _ref3 <= this.featureType.maxZoomPoint) || (this.featureType.minZoomIcon <= (_ref5 = (_ref6 = this.map) != null ? _ref6.getZoom() : void 0) && _ref5 <= this.featureType.maxZoomIcon);
    };

    Feature.prototype.setVisible = function(visible) {
      var feature, visible_, _ref2, _ref3, _ref4;
      if (this.editable) {
        visible_ = true;
        feature = this;
      } else {
        _ref3 = (_ref2 = this.map) != null ? _ref2.triggerHooks('before_feature_setVisible', this, visible) : void 0, feature = _ref3[0], visible_ = _ref3[1];
      }
      this.visible = visible_;
      if ((_ref4 = this.marker) != null) {
        _ref4.setVisible(visible_ && this.markerShouldBeVisible());
      }
      return this.geometry.setVisible(visible_);
    };

    Feature.prototype.getCenter = function() {
      return this.geometry.getCenter();
    };

    Feature.prototype.setOptions = function(options) {
      return this.geometry.setOptions(options);
    };

    Feature.prototype.getIcon = function() {
      return this.geometry.getIcon();
    };

    Feature.prototype.setIcon = function(icon) {
      var _ref2;
      if ((_ref2 = this.marker) != null) {
        _ref2.setIcon(icon);
      }
      return this.geometry.setIcon(icon);
    };

    Feature.prototype.setBorderSize = function(borderSize) {
      this.borderSize = borderSize;
    };

    Feature.prototype.getBorderSize = function() {
      var _ref2;
      return (_ref2 = this.borderSize) != null ? _ref2 : this.featureType.border_size;
    };

    Feature.prototype.setBorderSizeHover = function(borderSizeHover) {
      this.borderSizeHover = borderSizeHover;
    };

    Feature.prototype.getBorderSizeHover = function() {
      var _ref2;
      return (_ref2 = this.borderSizeHover) != null ? _ref2 : this.featureType.borderSizeHover;
    };

    Feature.prototype.setBorderColor = function(borderColor) {
      this.borderColor = borderColor;
    };

    Feature.prototype.getBorderColor = function() {
      var _ref2;
      return (_ref2 = this.borderColor) != null ? _ref2 : this.featureType.borderColor;
    };

    Feature.prototype.setBorderOpacity = function(borderOpacity) {
      this.borderOpacity = borderOpacity;
    };

    Feature.prototype.getBorderOpacity = function() {
      var _ref2;
      return (_ref2 = this.borderOpacity) != null ? _ref2 : this.featureType.borderOpacity;
    };

    Feature.prototype.setBackgroundColor = function(backgroundColor) {
      this.backgroundColor = backgroundColor;
    };

    Feature.prototype.getBackgroundColor = function() {
      var _ref2;
      return (_ref2 = this.backgroundColor) != null ? _ref2 : this.featureType.backgroundColor;
    };

    Feature.prototype.setBackgroundOpacity = function(backgroundOpacity) {
      this.backgroundOpacity = backgroundOpacity;
    };

    Feature.prototype.getBackgroundOpacity = function() {
      var _ref2;
      return (_ref2 = this.backgroundOpacity) != null ? _ref2 : this.featureType.backgroundOpacity;
    };

    Feature.prototype.setDefaultZIndex = function(defaultZIndex) {
      this.defaultZIndex = defaultZIndex;
    };

    Feature.prototype.getDefaultZIndex = function() {
      var _ref2;
      return (_ref2 = this.defaultZIndex) != null ? _ref2 : this.featureType.zIndex;
    };

    Feature.prototype.refresh = function() {
      return this.geometry.refresh();
    };

    return Feature;

  })();
  window.komoo.features = {
    Feature: Feature,
    makeFeature: function(geojson, featureTypes) {
      var _ref2;
      return new komoo.features.Feature({
        geojson: geojson,
        featureType: featureTypes != null ? featureTypes[geojson != null ? (_ref2 = geojson.properties) != null ? _ref2.type : void 0 : void 0] : void 0
      });
    }
  };
  return window.komoo.features;
});
